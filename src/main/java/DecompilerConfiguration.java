import com.intellij.ide.util.PropertiesComponent;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.ui.TextBrowseFolderListener;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;

public class DecompilerConfiguration {
    private JPanel root;
    private TextFieldWithBrowseButton textField;
    private JLabel warningMessage;
    private JLabel edit;

    private boolean settingChanged;

    public boolean isSettingChanged() {
        return settingChanged;
    }

    public void setDecompilerPath(String path) {
        textField.setText(path);
        warningMessage.setVisible(!verifyDecompilerFilePath(path));
    }

    public String getDecompilerPath() {
        return textField.getText();
    }

    public void save() {
        PropertiesComponent.getInstance()
                .setValue(DecompilerConfigurable.KEY_DECOMPILER_PATH, textField.getText());
        settingChanged = false;
    }

    private void createUIComponents() {
        //place custom component creation code here
        warningMessage = new JLabel();
        FileChooserDescriptor descriptor = new FileChooserDescriptor(
                true, false, true,
                true, true, false);
        textField = new TextFieldWithBrowseButton();
        String filePath = textField.getText();
        textField.getTextField().getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                warningMessage.setVisible(!verifyDecompilerFilePath(textField.getText()));
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                warningMessage.setVisible(!verifyDecompilerFilePath(textField.getText()));
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                warningMessage.setVisible(!verifyDecompilerFilePath(textField.getText()));
            }
        });
        textField.addBrowseFolderListener(new TextBrowseFolderListener(descriptor) {
            @Override
            protected void onFileChosen(@NotNull VirtualFile chosenFile) {
                super.onFileChosen(chosenFile);
                settingChanged = true;
            }
        });
    }

    private boolean verifyDecompilerFilePath(String path) {
        if (path.isEmpty()) {
            return false;
        }
        if (!path.toLowerCase().endsWith(".jar")) {
            return false;
        }
        return true;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root = new JPanel();
        root.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        root.setPreferredSize(new Dimension(700, 90));
        textField.setAlignmentX(0.0f);
        textField.setEditable(true);
        root.add(textField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(600, -1), null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setAlignmentY(0.5f);
        label1.setText("Decompiler Location111:");
        root.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        root.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        warningMessage.setIcon(new ImageIcon(getClass().getResource("/general/warning.png")));
        warningMessage.setText("Please set the decompiler path");
        root.add(warningMessage, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }
}
